// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Pharmix.Data.Enums;
using Pharmix.Web.Entities;
using System;

namespace Pharmix.Web.Migrations
{
    [DbContext(typeof(PharmixEntityContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("ContactType")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Gender", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(500);

                    b.Property<string>("AlternativeTel")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("City")
                        .HasMaxLength(200);

                    b.Property<string>("County")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int?>("GenderId");

                    b.Property<string>("IdNumber");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastVisitedDate");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(25);

                    b.Property<string>("NhsNumber");

                    b.Property<string>("PasNumber");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<DateTime>("RegisteredDate");

                    b.Property<bool?>("RequiresPasswordReset");

                    b.Property<string>("Surname")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(250);

                    b.Property<string>("Address2")
                        .HasMaxLength(250);

                    b.Property<int>("AddressTypeId");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("Zip")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.AddressType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });
            modelBuilder.Entity("Pharmix.Web.Entities.BusinessDetails", b =>
            {
                b.Property<int>("Id");
                b.Property<string>("BusinessName");
                b.Property<DateTime?>("LastSubscribedDate");
                b.Property<DateTime?>("LastExpirationDate");
                b.Property<string>("AddressLine1");
                b.Property<string>("AddressLine2");
                b.Property<string>("AddressLine3");
                b.Property<string>("City");
                b.Property<string>("Postcode");
                b.Property<string>("ContactPerson");
                b.Property<string>("ContactEmail");
                b.Property<string>("ContactPhone");
                b.Property<string>("IdentityUserId");
                b.HasKey("Id");

                b.ToTable("BusinessDetails");
            });

            modelBuilder.Entity("Pharmix.Web.Entities.AuditInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Info");

                    b.Property<string>("KeyId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Version");

                    b.HasKey("Id");

                    b.ToTable("AuditInfo");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.CommunicationNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<bool>("AssistanceRequired");

                    b.Property<string>("AssistanceRequiredDetail");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("FirstLanguage");

                    b.Property<string>("InterpreterPhone");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("PreferedLanguage");

                    b.Property<string>("PreferredAssistance");

                    b.Property<int>("PregnancyId");

                    b.Property<bool>("SpeakEnglish");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("CommunicationNeed","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Context.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.DmdRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Route");

                    b.HasKey("Id");

                    b.ToTable("DMDRoute","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.DmdSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SupplierName");

                    b.HasKey("Id");

                    b.ToTable("DMDSupplier","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("PhoneNumber2");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("EmergencyContact","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("TrustId");

                    b.ToTable("Group","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegratedSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("OrderNumberFieldName");

                    b.Property<string>("OrderStatusFieldName");

                    b.Property<string>("Type1ConnectionString");

                    b.Property<string>("Type1ParameterString");

                    b.Property<string>("Type1StoredProcedureName");

                    b.Property<int>("Type2QueryString");

                    b.Property<string>("Type2ResultTemplate");

                    b.Property<string>("Type2ServiceUrl");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegratedSystem","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AdministeredDate");

                    b.Property<int>("AllocatedIsolatorId");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime?>("BookedInDate");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("ExternalBarcode");

                    b.Property<string>("ExternalOrderId");

                    b.Property<int>("IntegratedSystemId");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("OrderLastProgressId");

                    b.Property<int?>("OrderlastClassificationId");

                    b.Property<int>("PriorityId");

                    b.Property<DateTime?>("RequiredDate");

                    b.Property<int>("RequiredPreperationTimeInMins");

                    b.Property<DateTime?>("ScheduledDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("IntegratedSystemId");

                    b.HasIndex("OrderlastClassificationId");

                    b.ToTable("IntegrationOrder","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrderClassification","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrderLocation","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderPreperation", b =>
                {
                    b.Property<int>("IntegrationOrderPreperationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("IntegrationOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("IsolatorId");

                    b.Property<int?>("IsolatorStaffAllocationId");

                    b.Property<DateTime>("PreperationDateTime");

                    b.Property<int>("PreperationStatusId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("IntegrationOrderPreperationId");

                    b.HasIndex("IntegrationOrderId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("IsolatorStaffAllocationId");

                    b.ToTable("IntegrationOrderPreperation","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrderProgress","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("IntegrationOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int?>("OrderCurrentLocationId");

                    b.Property<int?>("OrderLastClassificationId");

                    b.Property<int?>("OrderLastProgressId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationOrderId");

                    b.HasIndex("OrderCurrentLocationId");

                    b.HasIndex("OrderLastClassificationId");

                    b.HasIndex("OrderLastProgressId");

                    b.ToTable("IntegrationOrderTracking","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Isolator", b =>
                {
                    b.Property<int>("IsolatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbriviation");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("OfflineEndDate");

                    b.Property<string>("OfflineShifts");

                    b.Property<DateTime?>("OfflineStartDate");

                    b.Property<int>("TotalNumberOfDosesPerSession");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("IsolatorId");

                    b.ToTable("Isolator","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorMappedProcedure", b =>
                {
                    b.Property<int>("IsolatorMappedProcedureId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsolatorId");

                    b.Property<int>("ProcedureId");

                    b.HasKey("IsolatorMappedProcedureId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("IsolatorMappedProcedure","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorProcedure", b =>
                {
                    b.Property<int>("IsolatorProcedureId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("ProcedureTypeId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("IsolatorProcedureId");

                    b.ToTable("IsolatorProcedure","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorShift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("EndTime");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("ShiftTitle");

                    b.Property<string>("StartTime");

                    b.Property<double>("TotalShiftDurationInMins");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ShiftId");

                    b.ToTable("IsolatorShift","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorStaffAllocation", b =>
                {
                    b.Property<int>("IsolatorStaffAllocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AllocatedDate");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("DailyRecurringTypeId");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsRecurring");

                    b.Property<bool>("IsUsingIsolatorNow");

                    b.Property<int>("IsolatorId");

                    b.Property<int>("IsolatorShiftId");

                    b.Property<int?>("ParentAllocationId");

                    b.Property<DateTime?>("RecurringEndDate");

                    b.Property<int>("RecurringTypeId");

                    b.Property<string>("StaffId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("WeeklyRecurringWeekdays");

                    b.HasKey("IsolatorStaffAllocationId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("IsolatorShiftId");

                    b.HasIndex("ParentAllocationId");

                    b.HasIndex("StaffId");

                    b.ToTable("IsolatorStaffAllocation","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MaternityContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmbulancePhone");

                    b.Property<string>("AntenatalClinicPhone");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("CommunityOfficePhone");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("DeliverySuitePhone");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MaternityUnit");

                    b.Property<string>("MaternityUnitPhone");

                    b.Property<string>("Midwife");

                    b.Property<string>("MidwifePhone");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("MaternityContact","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Module","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.NextOfKin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PregnancyId");

                    b.Property<string>("Relaton");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("NextOfKin","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.OrderTrackingDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<decimal?>("BatteryPercent");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastCharged");

                    b.Property<DateTime?>("LastHeartBeat");

                    b.Property<int?>("LastLocationId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Serial")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("LastLocationId");

                    b.ToTable("OrderTrackingDevice","order");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CssClass");

                    b.Property<string>("DisplayName");

                    b.Property<bool?>("IsShowMenu");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ParentPermissionId");

                    b.Property<int?>("Sort");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Permission","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<int>("PermissionId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionGroup","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PlanOfCare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("JobTitle");

                    b.Property<string>("LeadProfessional");

                    b.Property<string>("PlannedPlaceOfBirth");

                    b.Property<int>("PregnancyId");

                    b.Property<string>("ReasonIfChanged");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PlanOfCare","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Pregnancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<DateTime?>("EDD");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MaternityUnit")
                        .HasMaxLength(25);

                    b.Property<string>("NHSNumber")
                        .HasMaxLength(25);

                    b.Property<int>("PatientId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Pregnancy","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PrimaryCareContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("Centre");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("GPInitial");

                    b.Property<string>("GPPostcode");

                    b.Property<string>("GPSurename");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("PhoneNumber2");

                    b.Property<string>("PhoneNumber3");

                    b.Property<string>("PhoneNumber4");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PrimaryCareContact","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<DateTime?>("FromDateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Location");

                    b.Property<int>("ReminderEntityTypeId");

                    b.Property<int>("ReminderModuleId");

                    b.Property<string>("ReminderModuleKeyId");

                    b.Property<int>("ReminderTypeId");

                    b.Property<string>("Subject");

                    b.Property<DateTime?>("TodDateTime");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderId");

                    b.ToTable("Reminder","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitation", b =>
                {
                    b.Property<int>("ReminderInvitationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("ReminderId");

                    b.Property<string>("SenderUserName");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderInvitationId");

                    b.HasIndex("ReminderId");

                    b.ToTable("ReminderInvitation","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitationMember", b =>
                {
                    b.Property<int>("ReminderInvitationMemberId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool?>("HasRead");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("ReadDate");

                    b.Property<string>("RecipientUserName");

                    b.Property<int>("ReminderInvitationId");

                    b.Property<int>("ReminderProgressId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderInvitationMemberId");

                    b.HasIndex("ReminderInvitationId");

                    b.HasIndex("ReminderProgressId");

                    b.ToTable("ReminderInvitationMember","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderProgress", b =>
                {
                    b.Property<int>("ReminderProgressId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastProgressDate");

                    b.Property<int>("ReminderProgressPercent");

                    b.Property<int>("ReminderProgressStatusId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderProgressId");

                    b.HasIndex("ReminderProgressStatusId");

                    b.ToTable("ReminderProgress","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderProgressStatus", b =>
                {
                    b.Property<int>("ReminderProgressStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderProgressStatusId");

                    b.ToTable("ReminderProgressStatus","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId");

                    b.Property<int?>("PermissionId");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.StockEvidence", b =>
                {
                    b.Property<int>("StockEvidenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("FileAddedBy");

                    b.Property<DateTime?>("FileAddedDate");

                    b.Property<string>("FileContent");

                    b.Property<string>("FileExtension");

                    b.Property<string>("FileTitle");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<int>("UsedProductStockId");

                    b.HasKey("StockEvidenceId");

                    b.HasIndex("UsedProductStockId");

                    b.ToTable("StockEvidence","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.StockStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("StockStatus","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.StorageLocation", b =>
                {
                    b.Property<int>("StorageLocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<decimal?>("LastHumidity");

                    b.Property<decimal?>("LastTemperature");

                    b.Property<string>("LocationCode");

                    b.Property<string>("LocationName");

                    b.Property<string>("SensorIdentifier");

                    b.Property<DateTime?>("SensorInstalledDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("StorageLocationId");

                    b.ToTable("StorageLocation","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.SupervisorRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int?>("CurrentOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("IsolatorId");

                    b.Property<int>("LatestRequestStatus");

                    b.Property<int>("Priority");

                    b.Property<string>("RequestedBy");

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.Property<int>("TypeId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOrderId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("TypeId");

                    b.ToTable("SupervisorRequest","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.SupervisorRequestTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastModifiedUser");

                    b.Property<int>("RequestId");

                    b.Property<int>("RequestStatus");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("SupervisorRequestTracking","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.SupervisorRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("SupervisorRequestType","iso");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Trust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("FridayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<bool>("IsArchived");

                    b.Property<byte[]>("LogoImage");

                    b.Property<string>("LogoImageName")
                        .HasMaxLength(200);

                    b.Property<string>("MondayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SaturdayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("SundayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("ThursdayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("TuesdayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("WednesdayOpenTiming")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("Trusts","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.TrustAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustAddresses","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.TrustContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContactId");

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustContacts","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.TrustModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId");

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustModule","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.UsedProduct", b =>
                {
                    b.Property<int>("UsedProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<decimal?>("ConcentrationDosePerMl");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("CustomName");

                    b.Property<string>("Description");

                    b.Property<decimal?>("DoseAmountSize");

                    b.Property<string>("DoseMeasurementUnit");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<int>("VtmId");

                    b.HasKey("UsedProductId");

                    b.HasIndex("VtmId");

                    b.ToTable("UsedProduct","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.UsedProductStock", b =>
                {
                    b.Property<int>("UsedProductStockId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<decimal?>("DoseAmountSizeAvailable");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<int>("IntegrationOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("IsolatorId");

                    b.Property<DateTime?>("LastStoredDate");

                    b.Property<string>("Notes");

                    b.Property<string>("PackWeightWithLabel");

                    b.Property<int>("StockStatusId");

                    b.Property<int>("StorageLocationId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<int>("UsedProductId");

                    b.Property<string>("VerifiedBy");

                    b.Property<DateTime?>("VerifiedDate");

                    b.HasKey("UsedProductStockId");

                    b.HasIndex("IntegrationOrderId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("StockStatusId");

                    b.HasIndex("StorageLocationId");

                    b.HasIndex("UsedProductId");

                    b.ToTable("UsedProductStock","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.UserTrust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TrustId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrustId");

                    b.ToTable("UserTrust","trust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Vtm", b =>
                {
                    b.Property<int>("VtmId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("BrandName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<long?>("DmdId");

                    b.Property<int?>("DmdRouteId");

                    b.Property<int?>("DmdSupplierId");

                    b.Property<string>("DrugName");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsLicensed");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("VtmId");

                    b.HasIndex("DmdRouteId");

                    b.HasIndex("DmdSupplierId");

                    b.ToTable("VTM","prod");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long?>("AddressId");

                    b.Property<string>("AlternativeTel");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<int>("GenderId");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsResetPasswordRequired");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Surname");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Patient", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Pharmix.Web.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Address", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
            modelBuilder.Entity("Pharmix.Web.Entities.BusinessDetails", b =>
            {
                b.HasOne("Pharmix.Data.Entities.Context.IdentityUser", "IdentityUser")
                    .WithMany()
                    .HasForeignKey("IdentityUserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });
            modelBuilder.Entity("Pharmix.Web.Entities.CommunicationNeed", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EmergencyContact", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Group", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Trust", "Trust")
                        .WithMany()
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrder", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegratedSystem", "IntegratedSystem")
                        .WithMany()
                        .HasForeignKey("IntegratedSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderClassification", "IntegrationOrderClassification")
                        .WithMany()
                        .HasForeignKey("OrderlastClassificationId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderPreperation", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("IntegrationOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany("PreperationOrders")
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorStaffAllocation", "IsolatorStaffAllocation")
                        .WithMany()
                        .HasForeignKey("IsolatorStaffAllocationId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderTracking", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("IntegrationOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderLocation", "IntegrationOrderLocation")
                        .WithMany()
                        .HasForeignKey("OrderCurrentLocationId");

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderClassification", "IntegrationOrderClassification")
                        .WithMany()
                        .HasForeignKey("OrderLastClassificationId");

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderProgress", "IntegrationOrderProgress")
                        .WithMany()
                        .HasForeignKey("OrderLastProgressId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorMappedProcedure", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany("Procedures")
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorProcedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorStaffAllocation", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany("StaffShiftAllocations")
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorShift", "IsolatorShift")
                        .WithMany()
                        .HasForeignKey("IsolatorShiftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorStaffAllocation", "ParentStaffAllocation")
                        .WithMany()
                        .HasForeignKey("ParentAllocationId");

                    b.HasOne("Pharmix.Web.Entities.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MaternityContact", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.NextOfKin", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.OrderTrackingDevice", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderLocation", "LastLocation")
                        .WithMany()
                        .HasForeignKey("LastLocationId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Permission", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PermissionGroup", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Group", "Group")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Permission", "Permission")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PlanOfCare", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Pregnancy", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PrimaryCareContact", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitation", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Reminder", "Reminder")
                        .WithMany("TrustContacts")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitationMember", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ReminderInvitation", "ReminderInvitation")
                        .WithMany("ReminderInvitationMembers")
                        .HasForeignKey("ReminderInvitationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.ReminderProgress", "ReminderProgress")
                        .WithMany()
                        .HasForeignKey("ReminderProgressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderProgress", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ReminderProgressStatus", "ReminderProgressStatus")
                        .WithMany()
                        .HasForeignKey("ReminderProgressStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.RolePermission", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Group", "Group")
                        .WithMany("RolePermissions")
                        .HasForeignKey("GroupId");

                    b.HasOne("Pharmix.Web.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.StockEvidence", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.UsedProductStock", "UsedProductStock")
                        .WithMany()
                        .HasForeignKey("UsedProductStockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.SupervisorRequest", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("CurrentOrderId");

                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany()
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.SupervisorRequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.SupervisorRequestTracking", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.SupervisorRequest", "SupervisorRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.TrustAddress", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Trust", "Trust")
                        .WithMany("TrustAddresses")
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.TrustContact", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Trust", "Trust")
                        .WithMany("TrustContacts")
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.TrustModule", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Module", "Module")
                        .WithMany("TrustModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Trust", "Trust")
                        .WithMany()
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.UsedProduct", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Vtm", "Vtm")
                        .WithMany()
                        .HasForeignKey("VtmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.UsedProductStock", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("IntegrationOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany()
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.StockStatus", "StockStatus")
                        .WithMany()
                        .HasForeignKey("StockStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.UsedProduct", "UsedProduct")
                        .WithMany("Stocks")
                        .HasForeignKey("UsedProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.UserTrust", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Trust", "Trust")
                        .WithMany()
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Vtm", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.DmdRoute", "DmdRoute")
                        .WithMany()
                        .HasForeignKey("DmdRouteId");

                    b.HasOne("Pharmix.Web.Entities.DmdSupplier", "DmdSupplier")
                        .WithMany()
                        .HasForeignKey("DmdSupplierId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EmailPasswordTokeneDetails", b =>
            {
                b.Property<int>("Id");
                b.Property<string>("ResetDetail");
                b.Property<DateTime?>("PassworkToken");
                b.Property<DateTime?>("CreatedOn");
                b.Property<bool?>("IsActive");
               
                b.HasKey("Id");

                b.ToTable("EmailPasswordTokeneDetails");
            });

#pragma warning restore 612, 618
        }
    }
}
